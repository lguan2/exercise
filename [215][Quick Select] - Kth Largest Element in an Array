Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:

Input: [3,2,1,5,6,4] and k = 2
Output: 5
Example 2:

Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4
Note: 
You may assume k is always valid, 1 ≤ k ≤ array's length.
------------------------------

class Solution {
    public int findKthLargest(int[] nums, int k) {
        if(nums == null || k < 1)
            return 0;
        return helper(nums.length-k+1, nums, 0, nums.length-1);
        
    }
    
    public int helper(int k, int[] nums, int start, int end){
        int pivot = end;
        int i = start;
        int j = end;
        while(i < j){
            while(nums[i] < nums[pivot] && i < j){
                i++;
            }
            while(nums[j] >= nums[pivot] && i < j){
                j--;
            }
            if(i == j){
                break;
            }
            swap(nums, i, j);
        }
        swap(nums, i, end);
        if(k == i+1){
            //return nums[k];
            return nums[i];
        }else if(k > i+1){
            return helper(k, nums, i+1, end);
        }else{
            return helper(k, nums, start, i-1);
        }
    }
    
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

-------------------------
快速搜索， 重要思想 注意本题是kth最大的，不是kth大的， time O(n) -> O(n^2) 还要注意返回的坐标是i而不是k

我们来算一个理想状况，假如每次都平分，这样时间复杂度展开是 O(n + n/2 + n/4 + ... .+1) = O(2n) = O(n)。因为算法是，挑选一个pivot之后，O(n)时间进行partition，然后判断一下第k大在左边还是在右边。然后继续往下进行，那么理想情况下，无论去左边还是去右边，规模都从 n 变成了 n / 2。所以 T(n) = T(n/2) + O(n) = O(n)

如果不理想的情况，运气很不好的话，每次的pivot 都取到了最大或者最小的值，那么复杂度展开是 O(n + n-1 + n-2 + n-3 ... + 1) = O(n^2)。那么我们应该怎么衡量这个算法的时间复杂度呢？类似快速排序我们认为是 O(nlogn)的，因为我们算的是平均时间复杂度，也就是平摊一下各种情况的概率和时间复杂度。因为并不一定每次都运气那么不好，比如你用随机的方式挑选 pivot的话，这样我们认为 quick select 的时间复杂度均摊是 O(n)的。

具体的证明，就比较复杂了，建议不用掌握。
