    Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:

Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.
Example 2:

Input: nums = [-2, -1, 2, 1], k = 1
Output: 2 
Explanation: The subarray [-1, 2] sums to 1 and is the longest.
-------------------------------------------
    
    public static int maxSubarrayLen(int[] nums, int k) {
        int[] sum = new int[nums.length];
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, -1);
        for (int i = 0; i < nums.length; i++) {
            if (i == 0) {
                sum[i] = nums[i];
            } else {
                sum[i] = sum[i - 1] + nums[i];
            }
            if (!map.containsKey(sum[i])) {
                map.put(sum[i], i);
            }
        }
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            int residue = sum[i] - k;
            if (map.containsKey(residue) && map.get(residue) <= i) {
                res = Math.max(res, i - map.get(residue));
            }
        }
        return res;

    }
   --------------------------------
   思路非常重要，利用的是hashmap，不要忘记把0加进去
