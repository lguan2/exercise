Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Note: 
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?

--------------------
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums == null || nums.length == 0 || k == 0)
            return new int[] {};
        Deque<Integer> queue = new LinkedList<>();
        int[] res = new int[nums.length-k+1];
        for(int i = 0; i < nums.length; i++){
            while(!queue.isEmpty() && i-queue.getFirst() >= k){
                queue.pollFirst();
            }
            while(!queue.isEmpty() && nums[queue.getLast()] < nums[i]){
                queue.pollLast();
            }
            queue.add(i);
            if(i+1 >= k){
                res[i-k+1] = nums[queue.getFirst()];
            }
        }
        return res;
        
    }
----------------------------

O(n) 非常重要的思想，每次判断下一个数的时候，把超过k之前的定index先丢掉，然后再把k之内比当前数小的丢掉，当前max总保持在deque的第一位
