Given a sorted array of integers nums and integer values a, b and c. Apply a quadratic function of the form f(x) = ax2 + bx + c to each element x in the array.

The returned array must be in sorted order.

Expected time complexity: O(n)

Example 1:

Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]
Example 2:

Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]
-------------------------

    public int[] sortTransformedArray(int[] nums, int a, int b, int c){
        int len = nums.length;
        int[] res = new int[len];
        int i = 0, j = len-1;
        int index = a >=0 ? len-1 : 0;
        while(i <= j){
            int countI = count(nums[i], a, b, c);
            int countJ = count(nums[j], a, b, c);
            if(a >= 0){
                if(countI >= countJ){
                    res[index] = countI;
                    i++;
                }else {
                    res[index] = countJ;
                    j--;
                }
                index--;
            }else{
                if(countI < countJ){
                    res[index] = countI;
                    i++;
                }else{
                    res[index] = countJ;
                    j--;
                }
                index++;
            }
        }
        return res;
    }

    public int count(int x, int a, int b, int c){
        return a * x * x + b * x + c;
    }
    ----------------------------------
    
     // 并不需要额外考虑a=0和b的各种情况，都可以包括在a>=0 和 a<0里面了
    // 当a大于0的时候，两边的比较大，送后面开始填
    // 当a小于0的时候，中间比较大，量表比较小，从前面开始填
