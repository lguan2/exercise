Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

-----------------------

    public String removeKdigits(String num, int k) {
        if(k == num.length())
            return "0";
        char[] cs = num.toCharArray();
        Stack<Character> stack = new Stack<>();
        stack.push(cs[0]);
        int i = 1;
        while(i < cs.length && k > 0){
            // if(cs[i] < stack.peek()){
            //     stack.pop();
            //     k--;
            // }
            //whenever meet a digit which is less than the previous digit, discard the previous one
            //if(k>0 && !stack.isEmpty() && stack.peek()>cs[i]){
            while(k>0 && !stack.isEmpty() && stack.peek()>cs[i]){
                stack.pop();
                k--;
            }
            stack.push(cs[i]);
            i++;
        }
        
        StringBuilder sb = new StringBuilder();
        // corner case : "1111"
        while(k > 0){
            stack.pop();
            k--;
        }
        
        while(!stack.isEmpty()){
            sb.append(stack.pop());
        }
        sb = sb.reverse();
        sb.append(num.substring(i));
        int trailing = 0;
        while(trailing < sb.length() && sb.charAt(trailing) == '0'){
            trailing++;
        }
        if(trailing == sb.length())
            return "0";
        return sb.substring(trailing).toString();  
    }
