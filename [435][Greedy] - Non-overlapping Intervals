Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note:
You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
Example 1:
Input: [ [1,2], [2,3], [3,4], [1,3] ]

Output: 1

Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:
Input: [ [1,2], [1,2], [1,2] ]

Output: 2

Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:
Input: [ [1,2], [2,3] ]

Output: 0

Explanation: You don't need to remove any of the intervals since they're already non-overlapping.

------------------------------------------

    public int eraseOverlapIntervals(Interval[] intervals) {
        if(intervals == null || intervals.length <= 1)
            return 0;
        Arrays.sort(intervals, (i1, i2) -> (i1.end - i2.end));
        // count计算的是所有non overlapping的数量
        int count = 1;
        int end = intervals[0].end;
        for(int i = 1; i < intervals.length; i++){
            if(intervals[i].start < end){
                // overlapping的不管
                continue;
            }else{
                // intervals[i].start >= end
                // 找到了non-overlapping的
                end = intervals[i].end;
                count++;  
            }
        }
        return intervals.length-count;
        
    }
    -------------------------------------------
    
    AC 看了答案，是Greedy算法的经典问题，求至少去掉多少interval使得余下的变成non overlapping intervals = 求所给intervals中最多有多少non-overlapping intervals
Greedy polynomial solution
The following greedy algorithm does find the optimal solution:

Select the interval, x, with the earliest finishing time.
Remove x, and all intervals intersecting x, from the set of candidate intervals.
Repeat until the set of candidate intervals is empty.

https://leetcode.com/problems/non-overlapping-intervals/discuss/91713/Java:-Least-is-Most

