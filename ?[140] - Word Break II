
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]

------------------------------

class Solution {
    public List<String> wordBreak(String s, List<String> wordDict){
        List<String> res = new ArrayList<>();
        if(!check(s, wordDict))
            return res;
        helper(0, new HashSet<>(wordDict), s, res, new StringBuilder());
        return res;


    }
    
    public void helper(int start, Set<String> dict, String s, List<String> res, StringBuilder sb){
        if(start == s.length()){
            res.add(sb.substring(0, sb.length()-1).toString());
            return;
        }
        for(int i = start+1; i <= s.length(); i++){
            if(dict.contains(s.substring(start, i))){
                int len = sb.length();
                helper(i, dict, s, res, sb.append(s.substring(start, i)).append(" "));
                sb.setLength(len);
            }
        }
    }

    public boolean check(String s, List<String> wordDict){
        if(s == null || s.length() == 0)
            return false;
        boolean[] dp = new boolean[s.length() + 1];
        Set<String> dict = new HashSet<>(wordDict);
        dp[0] = true;
        for(int i = 0; i < s.length(); i++){
            for(int j = i+1; j <= s.length(); j++){
                String cur = s.substring(i, j);
                if(dict.contains(cur) && dp[i])
                    dp[j] = true;
            }
        }
        return dp[s.length()];
    }
}


------------------------

initial

//    public static void helper(int pre, int cur, Set<String> dict, String s, List<String> res, StringBuilder sb){
//        if(pre == s.length()){
//            res.add(sb.substring(0, sb.length()-1).toString());
//            return;
//        }
//
//        String str = s.substring(pre, cur);
//        if(dict.contains(str)){
//            sb.append(str).append(" ");
//            int len = sb.length();
//            for(int i = cur+1; i <=s.length(); i++){
//                helper(cur, i, dict, s, res, sb);
//                sb.setLength(len);
//            }
//            helper(cur, cur+1, dict, s, res, sb);
//        }else{
//            helper(pre, cur+1, dict, s, res, sb);
//        }
//
//    }

---------------------------

