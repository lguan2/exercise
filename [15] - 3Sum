Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
------------------------------
    
    
    // check two som with duplicates
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length <= 2)
            return res;
        int len = nums.length;
        int i = 0;
        Arrays.sort(nums);
        while(i <= len-3){
            if(i-1 >= 0 && nums[i-1] == nums[i]){
                i++;
                continue;
            }
            int j = i+1, k = len-1;
            while(j < k){
                if(j-1 > i && nums[j-1] == nums[j]){
                    j++;
                    continue;
                }
                if (k + 1 < len && nums[k + 1] == nums[k]) {
                    k--;
                    continue;
                }
                int check = nums[i] + nums[j] + nums[k];
                if(check == 0){
                    // create an arraylist with elements
                    res.add(new ArrayList<Integer>(
                            Arrays.asList(i, j, k)));
                    i++;
                    j--;
                }else if(check < 0){
                    i++;
                }else{
                    j--;
                }
            }  
        }
        return res;    
    }
    -------------------------------
    
        // check two sum with duplicates
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if(nums == null || nums.length <= 2)
            return res;
        int len = nums.length;
        int i = 0;
        Arrays.sort(nums);
        while(i <= len-3){
            if(i-1 >= 0 && nums[i-1] == nums[i]){
                i++;
                continue;
            }
            int j = i+1, k = len-1;
            while(j < k){
                if(j-1 > i && nums[j-1] == nums[j]){
                    j++;
                    continue;
                }
                //if (k + 1 < len && nums[k + 1] == nums[k]) {
                //    k--;
                //    continue;
                //}
                int check = nums[i] + nums[j] + nums[k];
                if(check == 0){
                    // create an arraylist with elements
                    res.add(new ArrayList<Integer>(
                            Arrays.asList(nums[i], nums[j], nums[k])));
                    j++;
                    k--;
                }else if(check < 0){
                    j++;
                }else{
                    k--;
                }
            }
            i++;
        }
        return res;    
    }
    
-----------------------------------------
AC - 主要是处理duplicate , i,j,k都要处理, 但是其实k是不需要处理的，因为i移动到下一个大的了，j也移动到下一个大的了，k一定会变的

