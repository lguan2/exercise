Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2 
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]
Follow up: Could you solve it in O(n2) runtime?
------------------------------
class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if(nums == null || nums.length < 3)
            return 0;
        int res = 0;
        Arrays.sort(nums);
        for(int i = 0; i < nums.length-2; i++){
            int j = i+1, k = nums.length-1;
            while(j < k){
                int cur = nums[i] + nums[j] + nums[k];
                if(cur < target){
                    res += k-j;
                    j++;
                }else{
                    k--;
                }
            }
        }
        return res;
        
    }

----------------------
基本思想是固定两个(i, k)，看另一个有多少种可能
