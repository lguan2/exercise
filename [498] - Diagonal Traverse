Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.

Example:
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output:  [1,2,4,7,5,3,6,8,9]
Explanation:

Note:
The total number of elements of the given matrix will not exceed 10,000.
---------------------------------
    public int[] findDiagonalOrder(int[][] matrix){
        if(matrix == null || matrix.length == 0){
            return new int[]{};
        }
        int m = matrix.length, n = matrix[0].length;
        int total = m*n;
        int i = 0, j = 0;
        boolean up = true;
        List<Integer> list = new ArrayList<>();
        while(total > 0){
            if(i < 0){
                if(j < n){
                    i = 0;
                }else {
                    j = n - 1;
                    i += 2;
                }
                up = !up;
            }else if(i == m){
                i = m-1;
                j +=2;
                up = !up;
            }else if(j < 0){
                j = 0;
                up = !up;
            }else if(j == n){
                j = n-1;
                i += 2;
                up = !up;
            }
            list.add(matrix[i][j]);

            if(up){
                i--;
                j++;
            }else{
                i++;
                j--;
            }
            total--;
        }
        int[] res = new int[m*n];
        for(int k =
            0; k < list.size(); k++){
            res[k] = list.get(k);
        }
        return res;

    }
    -----------------------------
    
    AC, 主要是有的时候要i和j同时判断，any cleaner solution?
    
    -------------------------
    
    lets start with 1st number which hase index 0, 0 . Add it in result.

now as per photo, direction is upwards , so lets define direction with one integer d where +1 means upwards and -1 means downwards. Try to understand the below photo where i and j are row and column index respectively.

image

now there is 4 different condition can happen when direction change can happen,initial direction is upwards however, in that case row can become negative, so if row becomes negative make it zero and columnt should be col+2 per the above photo.

same is applicable when column becomes negative.

another condition is when row >= max row length and columnt >= max col length.

	public static int[] findDiagonalOrder(int[][] matrix) {
		if (matrix == null || matrix.length == 0) {
			return new int[0];
		}
		int m = matrix.length;
		int n = matrix[0].length;
		int d = 1;
		int[] result = new int[m * n];
		int row = 0;
		int col = 0;
		for (int i = 0; i < m * n; i++) {
			result[i] = matrix[row][col];
			row -= d;
			col += d;
			if (row >= m) {
				row = row - 1;
				col += 2;
				d = -d;
			}
			if (col >= n) {
				col = col - 1;
				row += 2;
				d = -d;
			}
			if (row < 0) {
				row = 0;
				d = -d;
			}
			if (col < 0) {
				col = 0;
				d = -d;
			}
		}
		return result;
	}
