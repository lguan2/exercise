    Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
Could you come up with a one-pass algorithm using only constant space?
    
    
    -----------------------------
    incorrect
    public void sortColors(int[] nums) {
        if (nums == null || nums.length <= 1) return;
        int left = -1, right = nums.length;
        int p = 0;
        while (p < right) {
            if (nums[p] == 0) {
                nums[p] = nums[++left];
                nums[left] = 0;
            } else if (nums[p] == 2) {
                nums[p] = nums[--right];
                nums[right] = 2;
            } else {
                p++;
            }
        }
    }
    
    ----------------------------
    
    correct
    
        public void sortColors(int[] nums) {
        if (nums == null || nums.length <= 1) return;
        int left = -1, right = nums.length;
        int p = 0;
        while (p < right) {
            if (nums[p] == 0) {
                nums[p] = nums[++left];
                nums[left] = 0;
                // !!!!
                p++;
            } else if (nums[p] == 2) {
                nums[p] = nums[--right];
                nums[right] = 2;
            } else {
                p++;
            }
        }
    }
---------------------------------------

classic idea, see answer
看了答案， 基本思想是0向左边塞，2向右边塞，1不管继续往前走
但是还有一个问题就是每次只换完以后，如果当前是0，塞到++left以后一定置换到了1，因为前边的2已经全都塞到后面去了，所以这个时候要p++,但当前的置换如果只是把2塞到后面去了则不需要p++,因为后面什么都有
