Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

---------------------------

    public int trap(int[] height) {
        if(height == null || height.length == 0)
            return 0;
        int res = 0,lM = 0, rM = 0, i = 0, j = height.length-1;
        while(i < j){
            lM = Math.max(height[i], lM);
            rM = Math.max(height[j], rM);
            if(lM < rM){
                res += lM - height[i];
                i++;
            }else{
                res += rM - height[j];
                j--;
            }
        }
        return res;    
    }
    
------------------------------

每个block所能装的水实则是左右两边max（包括自身）最小的那个和本身高度的差，可以用left ,right两个数组保存
但是更好的方法是只用两个pointer,虽然两个pointer其实一个并不是那一侧的max但是并不妨碍，因为我们需要的是最小的max和本身的差
