Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3


---------------------

    public List<String> binaryTreePaths(TreeNode root){
        List<String> res = new ArrayList<>();
        if(root == null)
            return res;
        helper(root, new StringBuilder(), res);
        return res;
    }

    public void helper(TreeNode root, StringBuilder cur, List<String> res){
            if(root == null)
                return;

            if(root.left == null && root.right == null){
                cur.append("->").append(root.val);
                res.add(cur.substring(2).toString());
                return;
            }
            
            cur.append("->").append(root.val);
            // don't forget to set length back
            int len = cur.length();
            helper(root.left, cur, res);
            cur.setLength(len);
            helper(root.right, cur, res);
    }
    
 -------------------------
 
 AC don't forget to set length back
