Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly.

------------------

class Solution {
    public String multiply(String num1, String num2) {
        if(num1 == null || num2 == null || num1.equals("0") || num2.equals("0"))
            return "0";
        int l1 = num1.length();
        int l2 = num2.length();
        int[] res = new int[l1+l2];
        for(int i = l1-1; i >= 0; i--){
            for(int j = l2-1; j >= 0; j--){
                int x = num1.charAt(i) - '0';
                int y = num2.charAt(j) - '0';
                res[i+j+1] += x*y;
            }
        }
        int carry = 0;
        int sum = 0;
        for(int i = l1+l2-1; i >= 0; i--){
            sum = res[i] + carry;
            res[i] = sum%10;
            carry = sum/10;
        }
        StringBuilder sb = new StringBuilder();
        boolean findHead = false;
        for(int i = 0; i < res.length; i++){
            if(res[i] == 0 && !findHead){
                continue;
            }
            sb.append(res[i]);
            findHead = true;
        }
        if(sb.length() == 0){
            return "0";
        }
        return sb.toString();
//         long multi = 1;
//         long resNum = 0;
//         for(int i = res.length-1; i >= 0; i--){
//             resNum += res[i] * multi;
//             multi *= 10;
//         }
        
//         return resNum + "";
    }
}

-----------------------

N AC, 得到res数组后不能*10.。。要直接append成string，这样才不会overflow


See Answer
