Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2
Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

--------------------

    public int missingNumber(int[] nums) {
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != i){
                while(nums[i] >=0 && nums[i] < nums.length && nums[nums[i]] != nums[i]){
                    swap(nums, i, nums[i]);
                }
            }
        }
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != i)
                return i;
        }
        return nums.length;
        
    }
    
    public void swap(int[] nums, int i, int j){
      int temp = nums[j];
      nums[j] = nums[i];
      nums[i] = temp;
    }
    
 --------------------------
 
 Better Solution -> 利用sum
     public int missingNumber(int[] nums) {
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != i){
                while(nums[i] >=0 && nums[i] < nums.length && nums[nums[i]] != nums[i]){
                    swap(nums, i, nums[i]);
                }
            }
        }
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != i)
                return i;
        }
        return nums.length;
        
    }
    
    public void swap(int[] nums, int i, int j){
      int temp = nums[j];
      nums[j] = nums[i];
      nums[i] = temp;
    }
