
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4

-------------------------------------------------

class LRUCache {
    class DoubleListNode{
        int key;
        int val;
        DoubleListNode pre;
        DoubleListNode next;
        public DoubleListNode(int key, int val){
            this.key = key;
            this.val = val;
        }
    }
    
    DoubleListNode head = new DoubleListNode(-1,-1);
    DoubleListNode tail = new DoubleListNode(-1,-1);
    Map<Integer, DoubleListNode> map = new HashMap<>();
    int capacity;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.pre = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key))
            return -1;
        else{
            DoubleListNode cur = map.get(key);
            cur.pre.next = cur.next;
            cur.next.pre = cur.pre;
            DoubleListNode newNode = new DoubleListNode(key, cur.val);
            addAtTail(newNode);
            map.put(key, newNode);   
        }
        return map.get(key).val;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            DoubleListNode cur = map.get(key);
            cur.pre.next = cur.next;
            cur.next.pre = cur.pre;
            DoubleListNode newNode = new DoubleListNode(key, value);
            addAtTail(newNode);
            map.put(key, newNode);
        }else{
            if(map.keySet().size() == capacity){
                removeFromHead();
            }
            DoubleListNode node = new DoubleListNode(key, value);
            map.put(key, node);
            addAtTail(node);
        } 
    }
    
    public void removeFromHead(){
        DoubleListNode d = head.next.next;
        map.remove(head.next.key);
        head.next = d;
        d.pre = head;
    }
    
    public void addAtTail(DoubleListNode node){
        DoubleListNode p = tail.pre;
        p.next = node;
        node.next = tail;
        node.pre = p;
        tail.pre = node;
    }
}


------------------------------------------

AC, 思路是 double linkedlist + hashmap
java 固有实现是linkedhashmap
