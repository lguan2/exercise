Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.

--------------------------------

class MinStack {

    /** initialize your data structure here. */
    
    Stack<Integer> nums = new Stack<>();
    Stack<Integer> mins = new Stack<>();
    public MinStack() {
        
    }
    
    public void push(int x) {
        nums.push(x);
        // x <= mins.peek(), not x < mins.peek()
        if(mins.isEmpty() || x <= mins.peek()){
            mins.push(x);
        }
    }
    
    public void pop() {
        Integer pop = nums.pop();
        // incorrect pop == mins.peek()
        if(pop.equals(mins.peek())){
            mins.pop();
        }
    }
    
    public int top() {
        return nums.peek();
    }
    
    public int getMin() {
        return mins.peek();
    }
}
---------------------------------------

AC 有两个错误， 1） 当前加入的如果跟当前min相同也要加入min stack， 2） Integer 比较要用equals
