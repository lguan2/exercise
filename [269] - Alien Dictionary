    There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

Example 1:

Input:
[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]

Output: "wertf"
Example 2:

Input:
[
  "z",
  "x"
]

Output: "zx"
Example 3:

Input:
[
  "z",
  "x",
  "z"
] 

Output: "" 

Explanation: The order is invalid, so return "".
Note:

You may assume all letters are in lowercase.
You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.
------------------------------------------------------
    public String alienOrder(String[] words) {
        if (words == null) return null;
        Map<Character, Set<Character>> graph = new HashMap<>();
        for (String word : words) {
            for (int i = 0; i < word.length(); i++) {
                graph.put(word.charAt(i), new HashSet<>());
            }
        }
        for (int i = 1; i < words.length; i++) {
            String w1 = words[i - 1];
            String w2 = words[i];
            for (int j = 0; j < w1.length() && j < w2.length(); j++) {
                if (w1.charAt(j) != w2.charAt(j)) {
                    graph.get(w1.charAt(j)).add(w2.charAt(j));
                    break;
                }

            }
        }
        int[] visited = new int[26];
        for (Character key : graph.keySet()) {
            visited[key.charValue() - 'a'] = -1;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 26; i++) {
            if (visited[i] == -1 && !dfs(graph, visited, sb, (char) ('a' + i))) {
                return "";
            }
        }
        return sb.reverse().toString();

    }

    public boolean dfs(Map<Character, Set<Character>> graph, int[] visited, StringBuilder sb, Character cur) {
        if (visited[cur.charValue() - 'a'] == 2) return true;
        if (visited[cur.charValue() - 'a'] == 1) return false;
        visited[cur.charValue() - 'a'] = 1;
        for (Character next : graph.get(cur)) {
            if (!dfs(graph, visited, sb, next)) {
                return false;
            }
        }
        visited[cur.charValue() - 'a'] = 2;
        sb.append(cur);
        return true;
    }
 --------------------------------
 
 AC 经典思路 拓扑排序， 本体只有前后两个词有关系，词间字母没有关系
    
  
