Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
-------------------------------------
    
    
    public static List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if (s == null || p == null || s.length() < p.length()) return res;
        Map<Character, Integer> expect = new HashMap<>();
        Map<Character, Integer> seen = new HashMap<>();
        for (int i = 0; i < p.length(); i++) {
            expect.put(p.charAt(i), expect.getOrDefault(p.charAt(i), 0) + 1);
        }
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            seen.put(c, seen.getOrDefault(c, 0) + 1);
            if (expect.containsKey(c) && expect.get(c) >= seen.get(c)) count++;
            if (i >= p.length()) {
                char pre = s.charAt(i - p.length());
                seen.put(pre, seen.get(pre) - 1);
                if (expect.containsKey(pre) && expect.get(pre) > seen.get(pre)) count--;
            }
            if (count == p.length()) {
                res.add(i - p.length() + 1);
            }

        }
        return res;
    }
    
    ------------
    time O(n), space O(n)
