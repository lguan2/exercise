Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Empty cells are indicated by the character '.'.


A sudoku puzzle...


...and its solution numbers marked in red.

Note:

The given board contain only digits 1-9 and the character '.'.
You may assume that the given Sudoku puzzle will have a single unique solution.
The given board size is always 9x9.


-----------------------

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    
    public boolean solve(char[][] board){
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                if(board[i][j] == '.'){
                    for(int k = 1; k <= 9; k++){
                        //board[i][j] = '0' + k;
                        board[i][j] = (char) ('0' + k);
                        if(isValid(board, i, j) && solve(board)){
                            return true;
                        }
                        board[i][j] = '.';
                    }
                    // 不要忘记 return false
                    return false;
                }   
            }
        }
        // 为什么不能return false，不是应该无所谓吗？
        return true; 
        //return false;
    }
    
    public boolean isValid(char[][] board, int row, int col){
        for(int i = 0; i < 9; i++){
            if(i != row && board[row][col] == board[i][col])
                return false;
        }
        for(int j = 0; j < 9; j++){
            if(j != col && board[row][col] == board[row][j])
                return false;
        }
        for(int i = row/3*3; i < row/3*3+3; i++){
            for(int j = col/3*3; j < col/3*3+3; j++){
                if(i!= row && j != row && board[i][j] == board[row][col])
                    return false;
            }
        }
        return true;
    }
}

-----------------------

不是很好，尚有疑问
更好的方法？

时间复杂度：O(9^m)

