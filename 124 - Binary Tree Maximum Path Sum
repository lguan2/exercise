Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42
----------------------

    int res = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        if(root == null)
            return 0;
        helper(root);
        return res;
        
    }
    
    public int helper(TreeNode root){
        if(root == null)
            return 0;
        if(root.left == null && root.right == null){
            // 别忘了叶子节点也要单独进行一次比较
            res = Math.max(res, root.val);
            return root.val;
        }
        int left = helper(root.left);
        int right = helper(root.right);
        left  = left < 0 ? 0 : left;
        right  = right < 0 ? 0 : right;
        res = Math.max(res, left+right+root.val);
        return Math.max(left, right) + root.val;
    }
    
 -------------------
 别忘了叶子节点也要单独进行一次比较
 time: O(n), space O(logn)
