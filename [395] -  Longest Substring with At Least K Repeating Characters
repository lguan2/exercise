Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.

Example 1:

Input:
s = "aaabb", k = 3

Output:
3

The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input:
s = "ababbc", k = 2

Output:
5

The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.
-----------------------------
class Solution {
    public int longestSubstring(String s, int k) {
        return helper(s, k, 0, s.length());
    }
    public int helper(String s, int k, int start, int end){
        if(end-start < k)
            return 0;
        int[] count = new int[26];
        for(int i = start; i < end; i++){
            count[s.charAt(i) - 'a']++;
        }
        for(int i = start; i < end; i++){
            if(count[s.charAt(i) - 'a'] < k){
                int j = i+1;
                while(j < s.length() && count[s.charAt(j) - 'a'] < k){
                    j++;
                }
                return Math.max(helper(s, k, start, i), helper(s, k, j, end));
            }
        }
        return end-start;  
    }
    // public void helper(String s, int k, int start, int end){
    //     if(end < start)
    //         return;
    //     int[] count = new int[26];
    //     for(int i = start; i < end; i++){
    //         count[s.charAt(i) - 'a']++;
    //     }
    //     boolean found = false;
    //     for(int i = start; i < end; i++){
    //         if(count[s.charAt(i) - 'a'] < k){
    //             found = true;
    //             helper(s, k, start, i);
    //             helper(s, k, i, s.length());
    //         }
    //     }
    //     if(!found){
    //         res = Math.max(res, end-start);
    //     }
    // }
}
---------------------------------
是divide and conquer 的思想， 必须返回一个数，不能用static res来比较，因为for loop这样比较的话，会stack overflow, 注意终止条件
