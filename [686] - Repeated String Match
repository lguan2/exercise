Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.

For example, with A = "abcd" and B = "cdabcdab".

Return 3, because by repeating A three times (“abcdabcdabcd”), B is a substring of it; and B is not a substring of A repeated two times ("abcdabcd").

Note:
The length of A and B will be between 1 and 10000.
--------------------------------------

    public int repeatedStringMatch(String A, String B){
        StringBuilder sb = new StringBuilder();
        int count = 0;
        while(sb.length() < B.length()){
            sb.append(A);
            count++;
        }
        if(sb.indexOf(B) != -1)
            return count;
        sb.append(A);
        count++;
        if(sb.indexOf(B) != -1)
            return count;
        return -1;
    }
    
    ---------------------------------------
    
    class Solution {
    public int repeatedStringMatch(String A, String B) {
        if(A == null || B == null)
            return -1;
        int m = A.length(), n = B.length();
        for(int i = 0; i < m; i++){
            int j = 0;
            for(; j < n; j++){
                if(A.charAt((i+j)%m) != B.charAt(j)){
                    break;
                }
            }
            if(j == n){
                //return (i+n)/m + (i+n)%m == 0 ? 0 : 1;
                return (i+n)/m + ((i+n)%m == 0 ? 0 : 1);

            }
        }

        return -1;
        
    }
}
