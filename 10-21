    
    // simplify?
    
    public List<Integer> eventualSafeNodes(int[][] graph){
        List<Integer> res = new ArrayList<>();
        if(graph == null || graph.length == 0) return res;
        Map<Integer, List<Integer>> map = new HashMap<>();
        int len = graph.length;
        for(int i = 0; i < len; i++){
            map.put(i, new ArrayList<>());
        }
        for(int i = 0; i < len; i++){
            for(int j = 0; j < graph[i].length; j++){
                map.get(i).add(graph[i][j]);
            }
            //map.get(graph[i]).addAll(Arrays.asList(graph[i]));
        }
        int[] visited = new int[len];
        for(int i = 0; i < len; i++){
            if(dfs(map, visited, i)){
                res.add(i);
            }
        }
        return res;
    }

    public boolean dfs(Map<Integer, List<Integer>> map, int[] visited, int cur){
        if(visited[cur] == 2){
            return true;
        }
        if(visited[cur] == 1){
            return false;
        }
        visited[cur] = 1;
        for(Integer child : map.get(cur)){
            if(visited[child] == 1)
                return false;
            if(!dfs(map, visited, child)){
                return false;
            }
        }
        visited[cur] = 2;
        return true;
    }
    
    ----
    //        int[][] matrix  = {{6,2,3},{5,4,2},{4,2,3}};
    // 329

    
    int m;
    int n;
    int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
    int finalRes = 0;
    public int longestIncreasingPath(int[][] matrix){
        if(matrix == null || matrix.length == 0) return 0;
        m = matrix.length;
        n = matrix[0].length;
        int[][] memo = new int[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(memo[i][j] == 0){
                    dfs(i, j, matrix, memo, Integer.MAX_VALUE);
                }
            }
        }
        return finalRes;
    }

    public int dfs(int x, int y, int[][] matrix, int[][] memo, int pre){
        if(x < 0 || x == m || y < 0 || y == n) return 0;
        if(memo[x][y] != 0) return memo[x][y];
        if(matrix[x][y] >= pre) return 0;
        int res = 1;
        for(int[] d : dirs){
            int i = x + d[0];
            int j = y + d[1];
            int candidate = dfs(i, j, matrix, memo, matrix[x][y]);
            res = Math.max(res, candidate+1);
        }
        memo[x][y] = res;
        finalRes = Math.max(res, finalRes);
        return res;
    }
------

207
    
    //    int[][] prerequisites = {{0,1},{1,0}};
//    System.out.println(test2.canFinish(2, prerequisites));
//    prerequisites = new int[][]{{0,1},{0,2}};
//    System.out.println(test2.canFinish(3, prerequisites));
//    prerequisites = new int[][]{{0,1},{0,2},{1,3},{2,3}};
//    System.out.println(test2.canFinish(4, prerequisites));

    public boolean canFinish(int numCourses, int[][] prerequisites){
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for(int i = 0; i < numCourses; i++){
            graph.put(i, new ArrayList<>());
        }
        for(int[] p : prerequisites){
            graph.get(p[1]).add(p[0]);
        }
        int[] visited = new int[numCourses];
        for(int i = 0; i < numCourses; i++){
            if(visited[i] == 0){
                if(!dfs(i, graph, visited)){
                    return false;
                }
            }
        }
        return true;
    }


    public boolean dfs(int cur,  Map<Integer, List<Integer>> graph, int[] visited){
        if(visited[cur] == 1){
            return false;
        }
        if(visited[cur] == 2){
            return true;
        }
        visited[cur] = 1;
        for(Integer child : graph.get(cur)){
            if(!dfs(child, graph, visited)){
                return false;
            }
        }
        visited[cur] = 2;
        return true;
    }
    
    ----
    
    public List<Integer> canFinish(int n, int[][] prerequisites){
	int[] viisted = new int[n];
	Map<Integer, List<Integer>> graph = new HashMap<>();
	for(int i = 0; i < n; i++){
		graph.put(i, new ArrayList<>());
	}
	for(int[] p : prerequisites){
		graph.get(p[1]).add(p[0]);
	}
	List<Integer> list = new ArrayList<>();
	for(int i = 0; i < n; i++){
		if(visited[i] != 0){
			if(!dfs(graph, visited, i, list)){
				return new ArrayList<>();
			}
		}
	}
	Collections.sort(list);
	return list;
}


public boolean dfs(Map<Integer, List<Integer>> graph, int[] viisted, int cur, List<Integer> list){
	if(visited[cur] == 1) return false;
	if(visited[cur] == 2) return true;
	visited[cur] = 1;
	for(Integer child : graph.get(child)){
		if(!dfs(graph, visited, child, list)){
			return false;
		}
	}
	viisted[cur] = 2;
	list.add(cur);
	return true;	
}
----
public int[] dailyTemperatures(int[] temperatures){
	if(temperatures == null || temperatures.length == 0) return temperatures;
	Stack<Integer> stack = new Stack<>();
	int[] res = new int[temperatures.length];
	stack.push(0);
	for(int i = 1; i < temperatures.length; i++)}{
		if(!stack.isEmpty()){
			while(temperatures[i] > temperatures[stack.peek()]){
				int pre = stack.pop();
				res[pre] = i-pre;
			}
		}
	}
	return res;
}

------

public int search(int[] nums, int target){
	if(nums == null || nums.length == 0){
		return -1;
	}
	int l = 0, r = nums.length-1, m = 0;
	while(l <= r){
		m = (l + r)/2;
		if(nums[m] == target) return m;
		// left is sort
		if(nums[l] <= nums[m]){
			if(target >= nums[l] && target < nums[m]){
				r = m-1;
			}else{
				l = m+1;
			}
		}else{
			if(target > nums[m] && target <= nums[r]){
				l = m+1;
			}else{
				r = m-1;
			}
		}
	}
	return -1;
}
----

public MaxStack{

	Stack<Integer> stack;
	Stack<Integer> maxStack;
	
	public MaxStack(){
		this.stack = new Stack<>();
		this.maxStack = new Stack<>();
	}

	public void push(int val){
		stack.push(val);
		if(maxStack.isEmpty() || val >= maxStack.peek()){
			maxStack.push(val);
		}
	}

	public int pop(){
		if(stack.isEmpty()){
			return -1;
		}
		int res = stack.pop();
		if(maxStack.peek() == res){
			maxStack.pop();
		}
		return res;
	}

	public int peek(){
		if(stack.isEmpty()){
			return -1;
		}
		return stack.peek();

	}

	public int peekMax(){
		if(stack.isEmpty()){
			return -1;
		}
		return stack.peek();
	}

	public int popMax(){
		if(stack.isEmpty()){
			return -1;
		}
		int res = maxStack.pop();
		Stack<Integer> temp = new Stack<>();
		while(stack.peek() != res){
			temp.add(stack.pop());
		}
		stack.pop();
		while(!temp.isEmpty()){
			stack.push(temp.pop());
		}
		return res;
	}
}
---

public class MaxStack {

    public static void main(String[] args) {
        MaxStack test = new MaxStack();
        test.push(1);
        test.push(3);
        test.push(1);
        test.push(3);
        System.out.println(test.peekMax());
        System.out.println(test.peek());
        System.out.println(test.pop());
        System.out.println(test.popMax());
        System.out.println(test.peek());
        System.out.println(test.popMax());
        System.out.println(test.popMax());




    }

    Stack<Integer> stack;
    Stack<Integer> maxStack;

    public MaxStack() {
        this.stack = new Stack<>();
        this.maxStack = new Stack<>();
    }

    public void push(int val) {
        stack.push(val);
        if (maxStack.isEmpty() || val >= maxStack.peek()) {
            maxStack.push(val);
        }
    }

    public int pop() {
        if (stack.isEmpty()) {
            return -1;
        }
        int res = stack.pop();
        if (maxStack.peek() == res) {
            maxStack.pop();
        }
        return res;
    }

    public int peek() {
        if (stack.isEmpty()) {
            return -1;
        }
        return stack.peek();

    }

    public int peekMax() {
        if (stack.isEmpty()) {
            return -1;
        }
        return stack.peek();
    }

    public int popMax() {
        if (stack.isEmpty()) {
            return -1;
        }
        int res = maxStack.pop();
        Stack<Integer> temp = new Stack<>();
        while (stack.peek() != res) {
            temp.add(stack.pop());
        }
        stack.pop();
        while (!temp.isEmpty()) {
            int t = temp.pop();
            stack.push(t);
            if (t >= maxStack.peek()) {
                maxStack.push(t);
            }
        }
        return res;
    }
}
