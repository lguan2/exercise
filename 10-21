    
    // simplify?
    
    public List<Integer> eventualSafeNodes(int[][] graph){
        List<Integer> res = new ArrayList<>();
        if(graph == null || graph.length == 0) return res;
        Map<Integer, List<Integer>> map = new HashMap<>();
        int len = graph.length;
        for(int i = 0; i < len; i++){
            map.put(i, new ArrayList<>());
        }
        for(int i = 0; i < len; i++){
            for(int j = 0; j < graph[i].length; j++){
                map.get(i).add(graph[i][j]);
            }
            //map.get(graph[i]).addAll(Arrays.asList(graph[i]));
        }
        int[] visited = new int[len];
        for(int i = 0; i < len; i++){
            if(dfs(map, visited, i)){
                res.add(i);
            }
        }
        return res;
    }

    public boolean dfs(Map<Integer, List<Integer>> map, int[] visited, int cur){
        if(visited[cur] == 2){
            return true;
        }
        if(visited[cur] == 1){
            return false;
        }
        visited[cur] = 1;
        for(Integer child : map.get(cur)){
            if(visited[child] == 1)
                return false;
            if(!dfs(map, visited, child)){
                return false;
            }
        }
        visited[cur] = 2;
        return true;
    }
    
    ----
