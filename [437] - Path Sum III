You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:

root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1

Return 3. The paths that sum to 8 are:

1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11

------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
        Map<Integer, Integer> preSum = new HashMap<>();
        preSum.put(0, 1);
        return helper(root, sum, 0, preSum);
        
    }
    
    public int helper(TreeNode root, int target, int curSum, Map<Integer, Integer> preSum){
        if(root == null)
            return 0;
        curSum += root.val;
        int res = preSum.getOrDefault(curSum - target, 0);
        preSum.put(curSum, preSum.getOrDefault(curSum , 0) + 1);
        res += helper(root.left, target, curSum, preSum);
        res += helper(root.right, target, curSum, preSum);
        preSum.put(curSum, preSum.get(curSum)-1);
        return res;
    }

}
--------------------
这道题最最关键的地方是，map里存的是之前所有node的距离，利用的是两个node分别到root的距离相减看是不是等于target. 为避免使用global result， bottom
up 返回数值
        preSum.put(curSum, preSum.get(curSum)-1);
