Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?

--------------------

    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null)
            return null;
        ListNode slow = head;
        ListNode fast = head;
        boolean cycle = false;
        while(true){
            if(slow != null && fast != null && fast.next != null){
                slow = slow.next;
                fast = fast.next.next;
                if(slow == fast){
                    cycle = true;
                    break;
                }
            }else{
                break;
            }
        }
        
        if(!cycle)
            return null;
        slow = head;
        while(slow != fast){
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
  ----------------------------
  
  简洁的
      public ListNode detectCycle(ListNode head) {
        ListNode p1 = head;
        ListNode p2 = head;
        while(p2 != null && p2.next != null){
            p1 = p1.next;
            p2 = p2.next.next;
            if(p1 == p2){
                break;
            }
        }
        if(p2 == null || p2.next == null){
            return null;
        }
        p1 = head;
        while(p1 != p2){
            p1 = p1.next;
            p2 = p2.next;
        }
        return p1;
        
    }
    
    --------------------------
    
    AC 主要证明
    
    a+b = R
    2 * (L + a) = L + n(a+b) + a => L + a = nR
    So if starts a pointer at cycle after a, the after L steps, it's n times cycle already, it's the entry of the cycle
    
