Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.

This is case sensitive, for example "Aa" is not considered a palindrome here.

Note:
Assume the length of given string will not exceed 1,010.

Example:

Input:
"abccccdd"

Output:
7

Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.

    public int longestPalindrome(String s) {
        if (s == null || s.length() == 0) return 0;
        Map<Character, Integer> map = new HashMap<>();
        char[] letters = s.toCharArray();
        for (char l : letters) {
            map.put(l, map.getOrDefault(l, 0) + 1);
        }
        int res = 0;
        boolean odd = false;
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() % 2 == 0) {
                res += entry.getValue();
            } else {
                // 注意如果是奇数个也能贡献
                odd = true;
                res += (entry.getValue()-1);
            }
        }
        // 如果是有奇数的情况，需要+1
        return odd ? res + 1 : res;
    }
    
--------------------------------------------------------------------

AC, 如果是奇数个也能贡献, 结果要+1
space: O(n), time: O(n)
