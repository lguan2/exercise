Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

----------------------------

    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return res;
        int m = matrix.length, n = matrix[0].length;
        int left = 0, bottom = m-1, top = 0, right = n-1;
        int count = 0;
        while(count < m*n){
            for(int i = left; i <=right; i++){
                res.add(matrix[top][i]);
                count++;
            }
            top++;
            
            for(int i = top; i <= bottom; i++){
                res.add(matrix[i][right]);
                count++;
            }
            right--;
            
            if(left > right || top > bottom){
                break;
            }
            for(int i = right; i >= left; i--){
                res.add(matrix[bottom][i]);
                count++;
            }
            bottom--;
            
            if(left > right || top > bottom){
                break;
            }
            for(int i = bottom; i >= top; i--){
                res.add(matrix[i][left]);
                count++;
            }
            left++;
        }
        return res;
        
    }
    
  ------------------------
  AC, 注意事项
  1） 结束条件可以count， 也可以是边界的关系
  2） 不要忘记empty 和 null input的判断
  3） 要set m 和 n, 否则直接用 right 和 bottom是会变的
