Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target k in the tree.

Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

In the following examples, the input tree is represented in flattened form row by row. The actual root tree given will be a TreeNode object.

Example 1:

Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2

Output: 2 (or 3)

Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.
Example 2:

Input:
root = [1], k = 1
Output: 1

Explanation: The nearest leaf node is the root node itself.
Example 3:

Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6

Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.
Note:
root represents a binary tree with at least 1 node and at most 1000 nodes.
Every node has a unique node.val in range [1, 1000].
There exists some node in the given binary tree for which node.val == k.

--------------------------------------------------------------

    AC - 基本思想是讲Binary Tree转化成无向图，从所给的node作为起点将图拎起来，做bfs来找最近的leaf
    有很多corner case
    - 所给的node本身是leaf,则最近的leaf是自己
    - 所找到的最近leaf是root,则要继续寻找，因为root不是leaf
 Time : O(n) Space: O(n)
    
--------------------------------------------------------------

    boolean selfLeaf = false;

    public int findClosestLeaf(TreeNode root, int k) {
        if(root.left == null && root.right == null)
            return root.val;
        List<int[]> edges = new ArrayList<>();
        Map<Integer, List<Integer>> graph = new HashMap<>();
        getEdges(root, edges, k);
        if(selfLeaf)
            return k;
        for(int[] e : edges){
            if(!graph.containsKey(e[0]))
                graph.put(e[0], new ArrayList<>());
            if(!graph.containsKey(e[1]))
                graph.put(e[1], new ArrayList<>());
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(k);
        visited.add(k);
        while(!queue.isEmpty()){
            int val = queue.poll();
            boolean hasChildren = false;
            for(Integer child : graph.get(val)){
                if(!visited.contains(child)){
                    visited.add(child);
                    hasChildren = true;
                    queue.add(child);
                }
            }
            if(!hasChildren && val != root.val){
                return val;
            }
        }
        return -1;


    }

    public void getEdges(TreeNode root, List<int[]> edges, int k){
        if(root == null)
            return;
        if(root.val == k){
            if(root.left == null && root.right == null)
                selfLeaf = true;
        }
        if(root.left != null)
            edges.add(new int[] {root.val, root.left.val});
        if(root.right != null)
            edges.add(new int[] {root.val, root.right.val});
        getEdges(root.left, edges, k);
        getEdges(root.right, edges, k);
    }
    -----------------------------------------------------------------------
    
