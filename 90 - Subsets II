Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]

-----------------------------

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) return res;
        // don't forget to sort
        Arrays.sort(nums);
        helper(nums, res, new ArrayList<>(), 0);
        return res;
    }

    public void helper(int[] nums, List<List<Integer>> res, List<Integer> list, int cur) {
        res.add(new ArrayList<>(list));
        int i = cur;
        while(i < nums.length){
            list.add(nums[i]);
            helper(nums, res, list, i + 1);
            list.remove(list.size() - 1);
            i++;
            while(i < nums.length && nums[i] == nums[i-1]){
                i++;
            }
        }
    }
 ---------------------------
 
 AC nlogn + n!
