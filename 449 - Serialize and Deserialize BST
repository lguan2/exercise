   Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
----------------------------
   
   // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        System.out.println(sb.toString());
        return sb.toString();
    }
    private void serializeHelper(TreeNode root, StringBuilder sb){
        if(root == null)
            return;
        sb.append(root.val).append(" ");
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        // 必须对root为null的情况进行特殊处理
        // 否则nodes = [""],之后不能被parse为int
        if(data.equals(""))
            return null;
        String[] nodes = data.split(" ");
        int[] pos = {0};
        return deserializeHelper(nodes, Integer.MIN_VALUE, Integer.MAX_VALUE, pos);   
    }
    
    //int cur = 0;
    // 不能传int,用一个长度为1的数组记录
    private TreeNode deserializeHelper(String[] nodes, int min, int max, int[] pos){
        if(pos[0] >= nodes.length)
            return null;
        int curVal = Integer.parseInt(nodes[pos[0]]);
        if(curVal < min || curVal > max)
            return null;
        TreeNode r = new TreeNode(curVal);
        pos[0]++;
        r.left = deserializeHelper(nodes, min, curVal, pos);
        r.right = deserializeHelper(nodes, curVal, max, pos);
        return r;
    }
