There are N workers.  The i-th worker has a quality[i] and a minimum wage expectation wage[i].

Now we want to hire exactly K workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:

Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
Every worker in the paid group must be paid at least their minimum wage expectation.
Return the least amount of money needed to form a paid group satisfying the above conditions.

 

Example 1:

Input: quality = [10,20,5], wage = [70,50,30], K = 2
Output: 105.00000
Explanation: We pay 70 to 0-th worker and 35 to 2-th worker.
Example 2:

Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3
Output: 30.66667
Explanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. 

Note:

1 <= K <= N <= 10000, where N = quality.length = wage.length
1 <= quality[i] <= 10000
1 <= wage[i] <= 10000
Answers within 10^-5 of the correct answer will be considered correct.
--------------------------------------

class Solution {
    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {
        int len = quality.length;
        double[][] ratios = new double[len][2];
        for(int i = 0; i < len; i++){
            ratios[i][0] = wage[i] * 1.0 / quality[i];
            ratios[i][1] = quality[i] * 1.0;
        }
        Arrays.sort(ratios, (a, b) -> Double.compare(a[0], b[0]));
        PriorityQueue<Double> heap = new PriorityQueue<>((a, b) -> Double.compare(b, a));
        double qSum = 0.0;
        double res = Double.MAX_VALUE;
        for(int i = 0; i < len; i++){
            qSum += ratios[i][1];
            heap.add(ratios[i][1]);
            if(heap.size() > K){
                qSum -= heap.poll();
            }
            if(heap.size() == K){
                res = Math.min(res, ratios[i][0] * qSum);
            }
        }
        return res;  
    }
}

-------------------------------------------------

See Answer 
这个题目主要是找出那个ratio, 首先将所有的w/q ratio 从小往大排， ratio我们一定希望越小越好，ratio太小的话，排在后面其他worker不能够达到薪资的expectation，
所以当我们迭代到第K个ratio开始， 去掉heap俩面q最大的worker,每次用当前的ratio去计算并与res比较
