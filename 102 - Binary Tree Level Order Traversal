    iterative
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null)
            return res;
        Queue<TreeNode> queue = new LinkedList<>();
        List<Integer> list = new ArrayList<>();
        queue.add(root);
        int count = 1;
        while(!queue.isEmpty()){
            TreeNode temp = queue.poll();
            count--;
            list.add(temp.val);
            if(temp.left != null)
                queue.add(temp.left);
            if(temp.right != null)
                queue.add(temp.right);
            if(count == 0){
                res.add(new ArrayList<>(list));
                list.clear();
                count = queue.size();
            }
        }
        return res;  
    }
    
    ---------------
    recursion 
    
        public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        helper(res, 1, root);
        return res;
    }
    
    public void helper(List<List<Integer>> res, int curDeepth, TreeNode root){
        if(root == null){
            return;
        }
        if(curDeepth > res.size()){
            res.add(new ArrayList<Integer>());
        }
        res.get(curDeepth-1).add(root.val);
        helper(res, curDeepth+1, root.left);
        helper(res, curDeepth+1, root.right);
    }
