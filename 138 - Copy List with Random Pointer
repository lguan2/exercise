A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.
----------------
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        if(head == null)
            return null;
        RandomListNode h2 = new RandomListNode(head.label);
        Map<RandomListNode, RandomListNode> map = new HashMap<>();
        map.put(head, h2);
        RandomListNode p = head;
        while(p != null){
            if(p.random != null){
                if(map.containsKey(p.random)){
                    map.get(p).random = map.get(p.random);
                }else{
                    map.get(p).random = new RandomListNode(p.random.label);
                    map.put(p.random, map.get(p).random);
                }
            }
            if(p.next != null){
                if(map.containsKey(p.next)){
                    map.get(p).next = map.get(p.next);
                }else{
                    map.get(p).next = new RandomListNode(p.next.label);
                    map.put(p.next, map.get(p).next);
                }
            }
            p = p.next;
        }
        return h2;    
    }
}
