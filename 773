    public static int slidingPuzzle(int[][] board) {
        StringBuilder startSb = new StringBuilder();
        String goal = "123450";
        for (int i = 0; i < 6; i++) {
            startSb.append(board[i / 3][i % 3]);
        }
        Queue<String> queue = new LinkedList<>();
        queue.add(startSb.toString());
        Set<String> visited = new HashSet<>();
        int[][] dirs = {{1, 3}, {0, 4, 2}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        int steps = 0;
        int size = queue.size();
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            if (cur.equals(goal)) {
                return steps;
            }
            size--;
            if (visited.contains(cur)) {
                continue;
            }
            visited.add(cur);
            int zeroIndex = cur.indexOf('0');
            int[] dir = dirs[zeroIndex];
            for (int d : dir) {
                String next = swap(cur, zeroIndex, d);
                queue.add(next);
            }
            if (size == 0) {
                size = queue.size();
                steps++;

            }

        }
        return -1;
    }

    private static String swap(String s, int i, int j) {
        StringBuilder sb = new StringBuilder(s);
        sb.setCharAt(i, s.charAt(j));
        sb.setCharAt(j, s.charAt(i));
        return sb.toString();
    }
