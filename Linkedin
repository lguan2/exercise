// 243
// pay attention to 2 bugs
//1: the order of updating res and updating last
//2: when previous is -1, should not update res
//    String[] words = {"practice", "makes", "perfect", "coding", "makes"};
//    System.out.println(test2.shortestDistance(words, "coding", "practice"));
//    System.out.println(test2.shortestDistance(words, "makes", "coding"));
    public int shortestDistance(String[] words, String word1, String word2){
        int pre = -1;
        String last = null;
        int res = Integer.MAX_VALUE;
        for(int i = 0; i < words.length; i++){
            if(words[i].equals(word1) || words[i].equals(word2)){
                if(!words[i].equals(last)){
                    if(pre != -1){
                        res = Math.min(res, i-pre);
                    }
                }
                last = words[i];
                pre = i;

            }
        }
        return res;
    }
    
 ------

// 244
class WordDistance{
    public static void main(String[] args) {

        String[] words = {"abc", "abc", "bcd", "ade", "cdf", "abc"};
        WordDistance wordDistance = new WordDistance(words);
        System.out.println(wordDistance.shortest("abc", "bcd"));
        System.out.println(wordDistance.shortest("abc", "cdf"));
        System.out.println(wordDistance.shortest("cdf", "bcd"));




    }
    Map<String, List<Integer>> map;
    public WordDistance(String[] words){
        map = new HashMap<>();
        if(words == null) return;
        for(int i = 0; i < words.length; i++){
            map.putIfAbsent(words[i], new ArrayList<>());
            map.get(words[i]).add(i);
        }
    }

    public int shortest(String word1, String word2){
        List<Integer> l1 = map.get(word1);
        List<Integer> l2 = map.get(word2);
        int p1 = 0, p2 = 0;
        int res = Integer.MAX_VALUE;
        while(p1 < l1.size() && p2 < l2.size()){
            res = Math.min(res, Math.abs(l1.get(p1) - l2.get(p2)));
            if(l1.get(p1) < l2.get(p2)){
                p1++;
            }else{
                p2++;
            }
        }
        return res;
    }
}
------


//    245
//    String[] words = {"abc", "def", "def", "abc", "khj"};
//    System.out.println(shortestWordDistance(words, "abc", "abc"));
//    System.out.println(shortestWordDistance(words, "def", "def"));
//    System.out.println(shortestWordDistance(words, "def", "khj"));
    public static int shortestWordDistance(String[] words, String word1, String word2){
        int pre = -1;
        String last = null;
        int res = Integer.MAX_VALUE;
        for(int i = 0; i < words.length; i++){
            if(words[i].equals(word1) || words[i].equals(word2)){
                if(!words[i].equals(last)){
                    if(pre != -1){
                        res = Math.min(res, i-pre);
                    }
                }else if(words[i].equals(last) && word1.equals(word2)){
                    res = Math.min(res, i-pre);
                }
                last = words[i];
                pre = i;
            }
        }
        return res;
    }
    
    ------
