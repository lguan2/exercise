Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.

Example 1:

Input: 12
Output: 21
 

Example 2:

Input: 21
Output: -1
-----------------------

    public int nextGreaterElement(int n){
        char[] A = (n + "").toCharArray();
        if(A.length <= 1)
            return -1;
        int i = A.length-2;
        for(; i >= 0; i--){
            if(A[i]  < A[i+1]){
                break;
            }
        }
        if(i == -1)
            return -1;
        int j = A.length-1;
        for(; j > i; j--){
            if(A[j] > A[i]){
                swap(A, i, j);
                break;
            }
        }
        // sort to exclusive
        Arrays.sort(A, i+1, A.length);
        long res = 0;
        for(int k = 0; k < A.length; k++){
            res = res * 10 + (A[k] - '0');
        }
        if(res > Integer.MAX_VALUE)
            return -1;
        return (int) res;


    }

    public void swap(char[] A, int i, int j){
        char temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
