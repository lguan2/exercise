    
    
    Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

----------------------
 incorrect 
 public static void merge(int[] nums1, int n, int[] nums2, int m) {
        int p1 = n - 1;
        int p2 = m - 1;
        int p = m + n - 1;
        while (p1 >= 0 && p2 >= 0) {
            if (nums1[p1] > nums2[p2]) {
                nums1[p] = nums1[p1];
                p1--;
            } else {
                nums1[p] = nums2[p2];
                p2--;
            }
            p--;
        }
        // while (p1 >= 0) {
        // nums1[p--] = nums1[p1--];
        // }
        // while (p2 >= 0) {
        // nums1[p--] = nums2[p2--];
        // }
    }
  -------------------------
    public void merge(int[] nums1, int n, int[] nums2, int m) {
        int p1 = n - 1;
        int p2 = m - 1;
        int p = m + n - 1;
        while (p1 >= 0 && p2 >= 0) {
            if (nums1[p1] > nums2[p2]) {
                nums1[p] = nums1[p1];
                p1--;
            } else {
                nums1[p] = nums2[p2];
                p2--;
            }
            p--;
        }
        // 不能去掉
        // 反例: [0], 0, [1], 1
        while (p1 >= 0) {
        nums1[p--] = nums1[p1--];
        }
        while (p2 >= 0) {
        nums1[p--] = nums2[p2--];
        }
    }
