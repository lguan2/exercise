Given a time represented in the format "HH:MM", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.

You may assume the given input string is always valid. For example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.

Example 1:

Input: "19:34"
Output: "19:39"
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.  It is not 19:33, because this occurs 23 hours and 59 minutes later.
Example 2:

Input: "23:59"
Output: "22:22"
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.

----------------------------

class Solution {
    public String nextClosestTime(String time) {
        char[] cur = time.replace(":", "").toCharArray();
        char[] digits = time.replace(":", "").toCharArray();
        Arrays.sort(digits);
        char min = digits[0];
        char[] res = Arrays.copyOf(cur, 4);
        for(int i = 3; i >= 0; i--){
            for (int j = 0; j < digits.length; j++) {
                if (digits[j] > cur[i]) {
                    res[i] = digits[j];
                    if (isValid(res)) {
                        return generateRes(res);
                    } else {
                        break;
                    }
                }
            }
            res[i] = min;
        }
        return generateRes(res);

    }

    public boolean isValid(char[] res) {
        int hh = (res[0] - '0') * 10 + (res[1] - '0');
        int mm = (res[2] - '0') * 10 + (res[3] - '0');
        //if (hh >= 0 && hh <= 24 && mm >= 0 && mm <= 60) return true;
        if (hh >= 0 && hh <= 23 && mm >= 0 && mm <= 59) return true;

        return false;
    }

    public String generateRes(char[] res) {
        StringBuilder sb = new StringBuilder();
        sb.append(res[0]).append(res[1]).append(":").append(res[2]).append(res[3]);
        return sb.toString();
    }
}
------------------------------

思路是从后往前置换比这个位置大的，但是一旦没有就要把这个位置换成最小的，再继续往前找，注意check hh和mm 24和60 是invalid的
