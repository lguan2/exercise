Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0. 
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? . 
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.


------------------
class Solution {
    public double[] calcEquation(String[][] equations, double[] values, String[][] queries) {
        Map<String, List<String>> strGraph = new HashMap<>();
        Map<String, List<Double>> valueGraph = new HashMap<>();
        for(int i = 0; i < equations.length; i++){
            String[] equation = equations[i];
            if(!strGraph.containsKey(equation[0])){
                strGraph.put(equation[0], new ArrayList<>());
                valueGraph.put(equation[0], new ArrayList<>());
            }
            if(!strGraph.containsKey(equation[1])){
                strGraph.put(equation[1], new ArrayList<>());
                valueGraph.put(equation[1], new ArrayList<>());
            }
            Double v1 = values[i];
            Double v2 = 1.0/values[i];
            strGraph.get(equation[0]).add(equation[1]);
            valueGraph.get(equation[0]).add(v1);

            strGraph.get(equation[1]).add(equation[0]);
            valueGraph.get(equation[1]).add(v2);
        }

        double[] res = new double[queries.length];
        for(int i = 0; i < res.length; i++){
            String[] query = queries[i];
            res[i] = dfs(query[0], query[1], strGraph, valueGraph, new HashSet<>(), 1.0);
            if(res[i] == 0.0)
                res[i] = -1.0;
        }
        return res;


    }

    public double dfs(String start, String end, Map<String, List<String>> strGraph, Map<String, List<Double>> valueGraph, Set<String> visited, double value){
        // 要注意已经访问过或不能继续访问（graph里不存在的点）返回0.0
        if(visited.contains(start) || !strGraph.containsKey(start))
            return 0.0;
        if(start.equals(end))
            return value;
        visited.add(start);
        double tmp = 0.0;
        for(int i = 0; i < strGraph.get(start).size(); i++){
            tmp = dfs(strGraph.get(start).get(i), end, strGraph, valueGraph, visited, value*valueGraph.get(start).get(i));
            // 只要找到就可以break了，不用浪费时间继续找了
            if(tmp != 0.0)
                break;
        }
        visited.remove(start);
        return tmp;
    }
}

-------------------------------

O(q*e)
