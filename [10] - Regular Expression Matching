Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like . or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
Example 4:

Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches "aab".
Example 5:

Input:
s = "mississippi"
p = "mis*is*p*."
Output: false
----------------------------

    public boolean isMatch(String s, String p) {
        if(s == null || p == null)
            return false;
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m+1][n+1];
        dp[0][0] = true;
        for(int j = 1; j <= n; j++)
            dp[0][j] = p.charAt(j-1) == '*' && dp[0][j-2];
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                char sc = s.charAt(i-1);
                char pc = p.charAt(j-1);
                if(pc != '*'){
                    if(sc == pc || pc == '.')
                        dp[i][j] = dp[i-1][j-1];
                    else
                        dp[i][j] = false;
                }else{
                    // '*' represents 0 preceding letter， 就直接不考虑当前的的p[j-1](*)和p[j-2](被忽略的字符)
                    dp[i][j] = dp[i][j-2];
                    
                    // 只有当s[i-1] == p[j-2]的时候， *才可能代表一个或多个，这样的话，相同的字符就被包含在p 的*中了， 那么将i向前移动
                    if(sc == p.charAt(j-2) || p.charAt(j-2) == '.'){
                        dp[i][j] |= dp[i-1][j];
                    }
                }
            }
        }
        return dp[m][n];         
    }
    
 --------------------------
 
 主要是p[j] = '*'的情况
