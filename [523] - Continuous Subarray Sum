Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:
Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
Note:
The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.
-------------------------

    public boolean checkSubarraySum(int[] nums, int k) {
        if(nums == null || nums.length <= 1)
            return false;
        int sum = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            // special case: k = 0
            if(k == 0){
                if(i>=1 && nums[i-1] == 0 && nums[i] == 0){
                    return true;
                }else{
                    continue;
                } 
            }
            sum += nums[i];
            // corner case: nums = [1,1] k = 2
            if(sum == k && i != 0)
                return true;
            if(map.get(sum % k) != null && i-map.get(sum%k) >= 1){
                return true;
            }
            map.put(sum%k, i);
        }
        return false;
    }
    
    ------------------
    
    Tricky, 思路是看当前sum的与k的mod是否在之前计算sum的时候出现过
    
    sum1%k = x1 ... mod1     => sum1 = k*x1 + mod1
    sum2%k = x2 ... mod1     => sum2 = k*x2 + mod1
    => sum2-sum1 = k*(x2-x1) answer
    
    问题是如果k是负数的话，负数取余？
    
    令special case, k = 0, corner case 某个sum刚好等于k
    

  
