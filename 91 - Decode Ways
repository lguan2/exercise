A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given a non-empty string containing only digits, determine the total number of ways to decode it.

Example 1:

Input: "12"
Output: 2
Explanation: It could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: "226"
Output: 3
Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

------------------------

    public int numDecodings(String s) {
        if(s == null || s.length() == 0)
            return 0;
        int len = s.length();
        int[] dp = new int[len+1];
        dp[0] = 1;
        if(s.charAt(0) > '0')
            dp[1] = 1;
        for(int i = 2; i <= len; i++){
            char c = s.charAt(i-1);
            if(c > '0' && c <= '9')
                dp[i] = dp[i-1];
            int twoDigits = Integer.parseInt(s.substring(i-2, i));
            if(twoDigits >= 10 && twoDigits <= 26)
                dp[i] += dp[i-2];
        }
        return dp[len];
        
        
    }
 ------------------------
 
 AC, slightly improve, 注意特殊情况， input "0"
 
 
     public static int numDecodings(String s) {
        if (s == null || s.length() == 0) return 0;
        char[] A = s.toCharArray();
        int[] dp = new int[A.length];

        dp[0] = A[0] == '0' ? 0 : 1;
        for (int i = 1; i < A.length; i++) {
            char cur = A[i];
            if (cur != '0') dp[i] = 1;
            char pre = A[i - 1];
            int twoDigits = (pre - '0') * 10 + (cur - '0');
            if (twoDigits >= 10 && twoDigits <= 26) {
                dp[i] += 1;
            }
        }
        return dp[A.length - 1];

    }
