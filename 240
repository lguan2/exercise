    public static boolean searchMatrixII(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0) return false;
        int row = matrix.length, col = matrix[0].length;
        int i = 0, j = col - 1;
        while (i < row && j >= 0) {
            if (target == matrix[i][j]) return true;
            if (matrix[i][j] < target)
                i++;
            else
                j--;
        }
        return false;
    }

    public static boolean searchMatrixIIBinarySearch(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0) return false;
        int row = matrix.length, col = matrix[0].length;

        int start = 0, end = row - 1;
        // find the first m[i][0] which is greater than target
        while (start <= end) {
            int mid = (start + end) / 2;
            if (matrix[mid][0] == target) {
                return true;
            } else if (matrix[mid][0] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        int rowIndex = start - 1;
        if (rowIndex < 0) return false;

        start = 0;
        end = col - 1;
        System.out.println("rowIndex: " + rowIndex);
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (matrix[rowIndex][mid] == target) return true;
            if (matrix[rowIndex][mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return false;
    }
