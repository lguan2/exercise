Given a nested list of integers, implement an iterator to flatten it.

Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:

Input: [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,1,2,1,1].
Example 2:

Input: [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, 
             the order of elements returned by next should be: [1,4,6].
--------------------------------------------         -----------------------
public class NestedIterator implements Iterator<Integer> {
    Stack<Iterator<NestedInteger>> stack = new Stack<>();
    Integer cur = null;

    public NestedIterator(List<NestedInteger> nestedList) {
        if(nestedList == null)
            return;
        stack.push(nestedList.iterator());
    }

    @Override
    public Integer next() {
        return cur;
    }

    @Override
    public boolean hasNext() {
        while(!stack.isEmpty()){
            Iterator<NestedInteger> iter = stack.peek();
            if(iter.hasNext()){
                NestedInteger ni = iter.next();
                if(ni.isInteger()){
                    cur = ni.getInteger();
                    return true;
                }else{
                    stack.push(ni.getList().iterator());
                }
            }else{
                stack.pop();
            }
        }
        return false;
        
    }
}
-------------------------------------------

AC 看答案了， stack里面可以放的是iterator
