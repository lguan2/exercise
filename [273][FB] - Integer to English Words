Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.

Example 1:

Input: 123
Output: "One Hundred Twenty Three"
Example 2:

Input: 12345
Output: "Twelve Thousand Three Hundred Forty Five"
Example 3:

Input: 1234567
Output: "One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"
Example 4:

Input: 1234567891
Output: "One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One"
--------------------
AC Solution:

    String[] belowTen = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
    String[] belowTwenty = {"Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    String[] belowHundred = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
    public String numberToWords(int num) {
        if(num == 0)
            return "Zero";
        return helper(num);
    }
    
    public String helper(int num){
        String res = "";
        if(num < 10){
            res = belowTen[num];
        }else if(num < 20){
            //return belowTwenty[num] + " ";
            res = belowTwenty[num-10];
        }else if(num < 100){
            res = belowHundred[num/10] + " " + helper(num%10);
        }else if(num < 1000){
            res = helper(num/100) + " Hundred " + helper(num%100);
        }else if(num < 1000000){
            res = helper(num/1000) + " Thousand " + helper(num%1000);
        }else if(num < 1000000000){
            res = helper(num/1000000) + " Million " + helper(num%1000000); 
        }else{
            res = helper(num/1000000000) + " Billion " + helper(num%1000000000);
        }
        return res.trim();
        
    }
 ----------------------------
 
 Better Solution
 
 private final String[] LESS_THAN_20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
private final String[] TENS = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
private final String[] THOUSANDS = {"", "Thousand", "Million", "Billion"};

public String numberToWords(int num) {
    if (num == 0) return "Zero";

    int i = 0;
    String words = "";
    
    while (num > 0) {
        if (num % 1000 != 0)
    	    words = helper(num % 1000) +THOUSANDS[i] + " " + words;
    	num /= 1000;
    	i++;
    }
    
    return words.trim();
}

private String helper(int num) {
    if (num == 0)
        return "";
    else if (num < 20)
        return LESS_THAN_20[num] + " ";
    else if (num < 100)
        return TENS[num / 10] + " " + helper(num % 10);
    else
        return LESS_THAN_20[num / 100] + " Hundred " + helper(num % 100);
}
-----------------
See Answer, N AC
AC solution 中比较容易错误的地方有
1） 拼写错误
2） 空格
3）每个单位数组的第一个

Better solution, time complexity 好 O(1)， 根据数字三位一组的特点
