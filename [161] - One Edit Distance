Given two strings s and t, determine if they are both one edit distance apart.

Note: 

There are 3 possiblities to satisify one edit distance apart:

Insert a character into s to get t
Delete a character from s to get t
Replace a character of s to get t
Example 1:

Input: s = "ab", t = "acb"
Output: true
Explanation: We can insert 'c' into s to get t.
Example 2:

Input: s = "cab", t = "ad"
Output: false
Explanation: We cannot get t from s by only one step.
Example 3:

Input: s = "1203", t = "1213"
Output: true
Explanation: We can replace '0' with '1' to get t.
--------------------------------------

    public boolean isOneEditDistance(String s, String t) {
        if(Math.abs(s.length() - t.length()) > 1)
            return false;
        boolean found = false;
        int i = 0, j = 0;
        while(i < s.length() && j < t.length()){
            char sc = s.charAt(i);
            char tc = t.charAt(j);
            if(sc != tc){
                if(found)
                    return false;
                if(s.length() < t.length())
                    j++;
                else if(t.length() < s.length())
                    i++;
                else{
                    i++;
                    j++;
                }
                found = true;
            }else{
                i++;
                j++;
            }
        }
        return (found || (j+1) == t.length() || (i+1) == s.length()); 
    }
 ---------------------------------------
 之前更简洁的算法
 
     public boolean isOneEditDistance(String s, String t) {
        if(Math.abs(s.length() - t.length()) > 1)
            return false;
        if(t.length() < s.length()){
            String temp = s;
            s = t;
            t = temp;
        }
        int i = 0;
        while(i < s.length()){
            if(s.charAt(i) == t.charAt(i)){
                i++;
            }else{
                if(s.length() == t.length()){
                    return s.substring(i+1).equals(t.substring(i+1));
                }else{
                    return s.substring(i).equals(t.substring(i+1));
                }
            }
        }
        //return true;
        return s.length() != t.length();
    }
    --------------------
    不论哪种做法都要考虑 s = "abc", t = "ab"的情况
