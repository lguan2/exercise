   Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

--------------------------------
   
   
   incorrect:
   
   public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) return res;
        helper(nums, res, new ArrayList<>(), 0);

        return res;
    }

    public void helper(int[] nums, List<List<Integer>> res, List<Integer> list, int cur) {
        if (cur == nums.length) return;
        res.add(new ArrayList<>(list));
        for (int i = cur; i < nums.length; i++) {
            list.add(i);
            helper(nums, res, list, i + 1);
            list.remove(list.size() - 1);
        }
    }
  ---------------------------
  
  after modified:
  
      public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) return res;
        helper(nums, res, new ArrayList<>(), 0);
        return res;
    }

    public void helper(int[] nums, List<List<Integer>> res, List<Integer> list, int cur) {
        //if (cur == nums.length) return;
        res.add(new ArrayList<>(list));
        for (int i = cur; i < nums.length; i++) {
            //list.add(i);
            list.add(nums[i]);
            helper(nums, res, list, i + 1);
            list.remove(list.size() - 1);
        }
    }
    
  ------------------------
  
  AC, 
  生成顺序：nums = [1,2,3]
  
  [], [1], [1,2], [1,2,3], [1,3], [2], [2,3], [3]
  时间复杂度 n!
  
