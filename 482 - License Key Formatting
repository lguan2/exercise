    You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.

Given a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.

Given a non-empty string S and a number K, format the string according to the rules described above.

Example 1:
Input: S = "5F3Z-2e-9-w", K = 4

Output: "5F3Z-2E9W"

Explanation: The string S has been split into two parts, each part has 4 characters.
Note that the two extra dashes are not needed and can be removed.
Example 2:
Input: S = "2-5g-3-J", K = 2

Output: "2-5G-3J"

Explanation: The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.
Note:
The length of string S will not exceed 12,000, and K is a positive integer.
String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).
String S is non-empty.

---------------------------
incorrect answer
    
    public String formating(String s, int k) {
        s = s.toUpperCase();
        StringBuilder sb = new StringBuilder();
        StringBuilder temp = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLetter(c) || Character.isDigit(c)) {
                temp.append(c);
            }
        }
        int mod = temp.length() % k;
        int i = 0;

        System.out.println(mod);
        while (i < mod) {
            sb.append(temp.charAt(i));
            i++;
        }
        if (mod != 0) {
            sb.append('-');
        }
        while (i < temp.length()) {
            sb.append(temp.charAt(i));
            if ((i + 1 - mod) % k == 0 && i != temp.length() - 1) {
                sb.append('-');
            }
            i++;
        }
        return sb.toString();
    }
------------------------------

AC modified

    public String licenseKeyFormatting(String s, int k) {
        s = s.toUpperCase();
        StringBuilder sb = new StringBuilder();
        StringBuilder temp = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLetter(c) || Character.isDigit(c)) {
                temp.append(c);
            }
        }
        int mod = temp.length() % k;
        // 还要看group的数量，如果不足一组已经结束，不能再加-
        int group = temp.length()/k;
        int i = 0;
        while (i < mod) {
            sb.append(temp.charAt(i));
            i++;
        }
        if (mod != 0 && group >= 1) {
            sb.append('-');
        }
        while (i < temp.length()) {
            sb.append(temp.charAt(i));
            if ((i + 1 - mod) % k == 0 && i != temp.length() - 1) {
                sb.append('-');
            }
            i++;
        }
        return sb.toString();
    }
    
    
