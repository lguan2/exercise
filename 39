    public static List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        if (candidates == null || candidates.length == 0) return res;
        Arrays.sort(candidates);
        for (int i = 0; i < candidates.length; i++) {
            helper(res, list, candidates, target, i);
        }

        return res;
    }

    public static void helper(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int pos) {
        if (target < candidates[pos] || pos >= candidates.length) return;
        if (target - candidates[pos] == 0) {
            list.add(candidates[pos]);
            res.add(new ArrayList<>(list));
            list.remove(list.size() - 1);
            return;
        }

        for (int i = pos; i < candidates.length; i++) {
            list.add(candidates[pos]);
            helper(res, list, candidates, target - candidates[pos], i);
            list.remove(list.size() - 1);
        }

    }
