The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example:

Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.

-------------------------

class Solution {
    List<List<String>> res = new ArrayList<>();

    public List<List<String>> solveNQueens(int n) {
        if(n == 0)
            return res;
        int[] places = new int[n];
        solve(0, places);
        return res;
        
    }
    
    public void solve(int cur, int[] places){
        if(cur == places.length){
            res.add(createList(places));
            return; 
        }
        for(int i = 0; i < places.length; i++){
            places[cur] = i;
            if(!check(places, cur))
                continue;
            solve(cur+1, places);
        }  
    }
    
    public List<String> createList(int[] places){
        List<String> res = new ArrayList<>();
        for(int i = 0; i < places.length; i++){
            StringBuilder sb = new StringBuilder();
            for(int j = 0; j < places.length; j++){
                if(places[i] != j)
                    sb.append('.');
                else
                    sb.append('Q');
            }
            res.add(sb.toString());
        }
        return res;  
    }
    
    public boolean check(int[] places, int pos){
        //check col;
        for(int i = 0; i <= pos; i++){
            for(int j = 0; j <= pos; j++){
                if(i!=j && places[i] == places[j])
                    return false;
            }
        }
        
        //check diag
        for(int i = 0; i <= pos; i++){
            for(int j = 0; j <= pos; j++){
                if(i!=j && Math.abs(j-i) == Math.abs(places[j]-places[i]))
                    return false;
            }
        }
        return true;
        
    }
}
------------------------------
better check function

    public boolean check(int[] queen, int curRow){
        for(int i = 0; i < curRow; i++){
            if(queen[i] == queen[curRow] || Math.abs(queen[i] - queen[curRow]) == curRow - i){
                return false;
            }
        }
        return true;
    }
    
    O(n!)
