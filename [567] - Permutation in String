Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.
Example 1:
Input:s1 = "ab" s2 = "eidbaooo"
Output:True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False
Note:
The input strings only contain lower case letters.
----------------------------------

    public boolean checkInclusion(String s1, String s2) {
        if(s1 == null || s2 == null || s1.length() > s2.length())
            return false;
        int[] expect = new int[26];
        for(int i = 0; i < s1.length(); i++)
            expect[s1.charAt(i) -'a']++;
        int[] found = new int[26];
        int count = 0;
        int i = 0;
        int last = 0;
        while(i < s2.length()){
            char c = s2.charAt(i);
            found[c-'a']++;
            if(found[c-'a'] <= expect[c-'a']){
                count++;
                if(count == s1.length())
                    return true;
            }else{
                while(last <= i){
                    char pre = s2.charAt(last);
                    found[pre-'a']--;
                    if(found[pre-'a'] < expect[pre-'a'])
                        count--;
                    last++;
                    if(pre == c){
                        break;
                    }
                    
                }
            }
            i++;

        }
        return false;

        
    }
 ------------------------------------------------
 
 AC, 在移动last指针的时候出了很多次错误
 移动的时候如果found[c] < expect[c], count 才需要-1, 终止条件是刚好last字符就是c,并且最后一次循环也需要last++
