//    int[] nums = {2,3,5,1};
//    System.out.println(test2.rob(nums));
    public int rob(int[] nums){
        if(nums == null || nums.length == 0) return 0;
        int len = nums.length;
        if(len == 1) return nums[0];
        if(len == 2) return Math.max(nums[0], nums[1]);
        int temp1 = nums[0];
        int temp2 = Math.max(nums[0], nums[1]);
        for(int i = 2; i < len; i++){
            int cur = Math.max(temp1 + nums[i], temp2);
            temp1 = temp2;
            temp2 = cur;
        }
        return temp2;
    }


    public int rob(int[] nums){
        if(nums == null || nums.length == 0) return 0;
        int len = nums.length;
        if(len == 1) return nums[0];
        int temp1 = 0;
        int temp2 = nums[0];
        for(int i = 1; i < len; i++){
            int cur = Math.max(temp1 + nums[i], temp2);
            temp1 = temp2;
            temp2 = cur;
        }
        return temp2;
    }
    
    
    public int rob3(TreeNode root){
	if(root == null) return 0;
	int sum = root.val;
	int left = 0;
	int right = 0;
	if(root.left != null){
		left = rob3(root.left);
		if(root.left.left != null){
			sum += root.left.left.val;
		}
		if(root.left.right != null){
			sum += root.left.right.val;
		}
	}

	if(root.right != null){
		right = rob3(root.right);
		if(root.right.left != null){
			sum += root.right.left.val;
		}
		if(root.right.right != null){
			sum += root.right.right.val;
		}
	}
	// we must record valid max in cur node
	root.val = Math.max(left+right, sum);
	return root.val;
}
