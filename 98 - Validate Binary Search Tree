Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Example 1:

Input:
    2
   / \
  1   3
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6
Output: false
Explanation: The input is: [5,1,4,null,null,3,6]. The root node's value
             is 5 but its right child's value is 4.
-----------------------------------------------

    public boolean isValidBST(TreeNode root) {
        return helper(root, null, null);
    }
    
    public boolean helper(TreeNode root, Integer max, Integer min){
        if(root == null)
            return true;
        if(max != null && root.val >= max)
            return false;
        if(min != null && root.val <= min)
            return false;
        return helper(root.left, root.val, min) && helper(root.right, max, root.val);
        
    }
 ---------------------------
 
 AC, 别忘了等于的情况
 
 time: O(n), space: O(logn)
