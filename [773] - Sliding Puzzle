    
On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

Examples:

Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:

board will be a 2 x 3 array as described above.
board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5].
---------------------------------
 Incorrect:
 
    public static int slidingPuzzle(int[][] board) {
        StringBuilder startSb = new StringBuilder();
        String goal = "123450";
        for (int i = 0; i < 6; i++) {
            startSb.append(board[i / 3][i % 3]);
        }
        Queue<String> queue = new LinkedList<>();
        queue.add(startSb.toString());
        Set<String> visited = new HashSet<>();
        int[][] dirs = {{1, 3}, {0, 4, 2}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        int steps = 0;
        int size = queue.size();
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            if (cur.equals(goal)) {
                return steps;
            }
            size--;
            if (visited.contains(cur)) {
                continue;
            }
            visited.add(cur);
            int zeroIndex = cur.indexOf('0');
            int[] dir = dirs[zeroIndex];
            for (int d : dir) {
                String next = swap(cur, zeroIndex, d);
                queue.add(next);
            }
            if (size == 0) {
                size = queue.size();
                steps++;

            }

        }
        return -1;
    }

    private static String swap(String s, int i, int j) {
        StringBuilder sb = new StringBuilder(s);
        sb.setCharAt(i, s.charAt(j));
        sb.setCharAt(j, s.charAt(i));
        return sb.toString();
    }
    
    Correct:
    
    
    class Solution {

    public int slidingPuzzle(int[][] board) {
        StringBuilder startSb = new StringBuilder();
        String goal = "123450";
        for (int i = 0; i < 6; i++) {
            startSb.append(board[i / 3][i % 3]);
        }
        Queue<String> queue = new LinkedList<>();
        queue.add(startSb.toString());
        Set<String> visited = new HashSet<>();
        int[][] dirs = {{1, 3}, {0, 4, 2}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        int steps = 0;
        int size = queue.size();
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            size--;
            if (cur.equals(goal)) {
                return steps;
            }
            if (visited.contains(cur)) {
                if (size == 0) {
                    size = queue.size();
                    steps++;
                }
                continue;
            }
            visited.add(cur);
            int zeroIndex = cur.indexOf('0');
            int[] dir = dirs[zeroIndex];
            for (int d : dir) {
                String next = swap(cur, zeroIndex, d);
                queue.add(next);
            }
            if (size == 0) {
                size = queue.size();
                steps++;
            }
        }
        return -1;
    }

    private String swap(String s, int i, int j) {
        StringBuilder sb = new StringBuilder(s);
        sb.setCharAt(i, s.charAt(j));
        sb.setCharAt(j, s.charAt(i));
        return sb.toString();
    }
}

-----------------------------

思路就是BFS, 主要是size的更改step++的时机，因为有的时候发现访问过就要返回了，但是也要check是不是0
