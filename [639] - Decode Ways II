A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.

------------------------------------

    long mod = (long) (Math.pow(10, 9) + 7);
    public int numDecodings(String s) {
        if(s == null || s.length() == 0)
            return 0;
        int len = s.length();
        long[] dp = new long[len+1];
        dp[0] = 1;
        if(s.charAt(0) > '0' && s.charAt(0) <= '9'){
            dp[1] = 1;
        }else if(s.charAt(0) == '*'){
            dp[1] = 9;
        }
        for(int i = 2; i <= len; i++){
            char first =s.charAt(i-2);
            char second = s.charAt(i-1);
            // from dp[i-1]
            if(second == '*'){
                dp[i] += dp[i-1] * 9;
            }else if(second >= '1' && second <= '9'){
                dp[i] += dp[i-1];
            }
            
            // from dp[i-2]
            if(first == '*'){
                if(second == '*'){
                    // * represents 1-9, so 11-19, 21-26
                    dp[i] += dp[i-2] * 15;
                }else if(second <= '6'){
                    dp[i] += dp[i-2] * 2;
                }else{
                    dp[i] += dp[i-2];
                }
            }else if(first == '1' || first == '2'){
                if(second == '*'){
                    if(first == '1'){
                        dp[i] += dp[i-2] * 9;
                    }else{
                        dp[i] += dp[i-2] * 6;
                    }
                //}else if(second >= '0' && second <= '9'){
                }else if((first - '0')*10 + (second-'0') >= 10 && (first - '0')*10 + (second-'0') <=26){

                    dp[i] += dp[i-2];
                }
            }
            dp[i] %= mod;
        }
        return (int) dp[len];
        
    }
   ------------------------------------
   注意*只能代表1-9，不能代表0
   这道题比较麻烦的地方是讨论各种情况，这个解法是先加上一位的再算两位的，两位的比较复杂，根据十位是什么在进行讨论
   其实可以转化成进一步的constance space dp
   
   https://leetcode.com/problems/decode-ways-ii/solution/
   
   https://leetcode.com/problems/decode-ways-ii/discuss/105258/Java-O(N)-by-General-Solution-for-all-DP-problems
   
   
